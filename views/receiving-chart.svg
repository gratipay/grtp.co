{% extends "./svg.swig" %}

{% set width = 250 %}
{% set height = 150 %}

{% block svg %}
<a xlink:href="https://gratipay.com/{{ username }}/" target="_blank">
    <rect x="0" y="0" width="{{ width }}" height="{{ height }}" rx="3" fill="#396" />

    <g transform="translate(7.9 10) scale(0.017)">
        <circle cx="767" cy="640" r="767" fill="#fff" />
        <path d="M 763,1046 413,573 q -16,-22 -24.5,-59 -8.5,-37 6,-85 14.5,-48 61.5,-79 40,-26 83,-25.5 43,0.5 73.5,17.5 30.5,17 54.5,45 36,40 96,40 59,0 95,-40 24,-28 54.5,-45 30.5,-17 73.5,-17.5 43,-0.5 84,25.5 46,31 60.5,79 14.5,48 6,85 -8.5,37 -24.5,59 z" fill="#396" />
    </g>

    <g font-family="sans-serif" font-size="16" fill="#fff">
        <text x="40" y="27">{{username}}</text>
        <text x="242" y="27" text-anchor="end" id="receiving">${{receiving}}/wk</text>
    </g>

    <rect x="8" y="142" width="234" height="1" fill="#fff" />

    <g id="chartOuter" fill="#fff" shape-rendering="crispEdges">
        <g id="chartInner">
            {% set width = 234 / charts.length %}
            <path d="M242,142{% for chart in charts %}
            {% set height = chart.receipts / max_received * 100 %}
            {% set minusone = loop.index - 1 %}
            L{{ Math.floor(242 - minusone * width) }},{{ Math.floor(142 - height) }}
            L{{ Math.floor(242 - loop.index * width) }},{{ Math.floor(142 - height) }}
            {% endfor %}L8,142z" />
        </g>
    </g>
</a>

<script><![CDATA[
var recValue = {{ receiving }};

var interval = 1000 / 30;
var steps = Math.floor(800 / interval);
var step = 0;

var receiving = document.getElementById('receiving');
var chartOuter = document.getElementById('chartOuter');
var chartInner = document.getElementById('chartInner');

receiving.textContent = '$0.00/wk';
chartInner.setAttribute('transform', 'scale(1 0)');
chartOuter.setAttribute('transform', 'translate(0 142)');

setTimeout(function() {
    (function animate() {
        var current = step / steps;

        receiving.textContent = '$' + (recValue * current).toFixed(2) + '/wk';
        chartInner.setAttribute('transform', 'scale(1 ' + current + ')');
        chartOuter.setAttribute('transform', 'translate(0 ' + (142 - 142 * current) + ')');

        if (step++ < steps) {
            setTimeout(animate, interval);
        }
    })();
}, 1000);
]]></script>
{% endblock %}
